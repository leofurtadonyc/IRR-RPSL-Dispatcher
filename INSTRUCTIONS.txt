## Leonardo Furtado - Released on March 18, 2025
https://github.com/leofurtadonyc/IRR-RPSL-Dispatcher

# IRR RPSL Dispacher Tool

IRR RPSL Dispatcher is a Python-based tool designed to simplify and automate the management of RPSL (Routing Policy Specification Language)
object submissions to Internet Routing Registry (IRR) instances by leveraging their APIs. It effectively bridges the gap between user-friendly
input formats and the strict requirements of IRR databases, thereby reducing operational complexity and saving time for network engineers and operations teams.

The tool processes RPSL objects using JSON input files or TXT files that contain specific header metadata. Users can specify actions such as
adding, modifying, or deleting objects through these header lines, provide passwords either in the files or as command-line arguments, and enable
one-time multiple route generation if desired.

IRR RPSL Dispatcher supports various IRR instances, ranging from local private IRRd for laboratory testing to production instances like RADB, ALTDB,
and TC IRR. It features configurable defaults to ensure compatibility across different operational environments.

Additionally, the tool generates JSON files that document the processed RPSL objects. These files are stored in an objects/ directory, facilitating
auditing and consistency management by ensuring that all submitted objects adhere to uniform formatting rules.

The tool can be enhanced in several ways to integrate more effectively with other tools. This would facilitate end-to-end network automation and play
a vital role in managing routing policies, where security and availability are critical. Please feel free to share any ideas or suggestions you may have.

## Note
The script is ready to use without Docker Compose, unless you want to run your own IRRd instance alongside irr_rpsl_dispatcher.py.
If you don't plan to run your own IRRd, you can skip the entire "Setup and Build" section.

## Features

### Flexible Input
The tool accepts full-path files in plain text, JSON, or specially formatted TXT files with header metadata.

### Header Metadata Support
TXT files can begin with header lines:
```
action: add|modify|delete
password: <password> (optional)
multiple_routes: true|false (optional)
```
The tool extracts these values to construct the JSON submission payload.

### NIC Handle Sanitization
The tool automatically sanitizes the `admin-c:` and `tech-c:` fields. For example, "John O. Player" is converted to "JOHN-O-PLAYER," 
ensuring compliance with IRRd’s requirements.

### Multiple Routes Generation
For IPv4 route objects:
- The original object is always included.
- If `multiple_routes: true` is specified, additional route objects are generated by subdividing the original network from (prefix length + 1) up to /24.

For IPv6 route6 objects:
- The original object is included.
- If `multiple_routes: true` is specified, subdivisions are generated from (prefix length + 1) up to /36.
- If the original prefix exceeds /36, the tool raises an error, as multiple routes are not permitted for prefixes longer than /36.

### Instance Support
The tool supports different IRR instances:
- `irrd`: your own local private IRRd instance (default HTTP API on port 8080)
- `altdb`: ALTDB (defaults to whois.altdb.net:43)
- `radb`: RADB (defaults to whois.radb.net:43)
- `tc`: TC IRR (defaults to whois.tc.net:43)

### JSON Record Generation
When processing TXT files, the tool creates a corresponding JSON file in an `objects/` folder (filename derived from object type and identifier).
Once the API submission is successful, the status in this JSON file is updated to "submitted."

## Requirements
- Docker and Docker Compose
- Python 3.12 or later
- A running IRRd instance configured to use PostgreSQL and Redis

## Setup and Build

1. **Build the Docker Containers:**
   ```
   docker-compose up --build
   ```

2. **Create the Database Schema:**
   In a separate terminal window/tab, run:
   ```
   docker-compose exec irrd python -m alembic -c /app/irrd/alembic.ini upgrade head
   docker-compose exec postgres psql -U irrd -d irrd -c "\dt"
   ```

3. **Stop the Docker Container (Foreground):**
   Press CTRL+C in the window running Docker in the foreground.

4. **Restart Docker Containers:**
   ```
   docker-compose up
   ```

### Creating the Maintainer Object
Since IRRd may not allow the creation of maintainer objects via the API, especially on your local IRRd instance, you will have to manually
insert a maintainer into the database. For example, run the following command in another terminal window (and ensure to change the values as needed):
```
docker-compose exec postgres psql -U irrd -d irrd -c "INSERT INTO rpsl_objects (rpsl_pk, object_text, source, object_class, parsed_data) VALUES (
  'MAINT-AS64496',
  E'mntner: MAINT-AS64496\n\
descr: FAKE TELECOM\n\
admin-c: FAKEME5-NICBR\n\
tech-c: FAKEME5-NICBR\n\
upd-to: noc@faketelecom.null\n\
auth: MD5-PW \$1\$1dwDrK3S\$4U0XfqK1qS/07BvguD6qQ0\n\
mnt-by: MAINT-AS64496\n\
source: IRRD',
  'IRRD',
  'mntner',
  E'{}'::json
);"
```

Verify that the maintainer was created:
```
docker-compose exec postgres psql -U irrd -d irrd -c "SELECT rpsl_pk, source, object_class, parsed_data FROM rpsl_objects WHERE rpsl_pk = 'MAINT-AS64496';"
```

Test with WHOIS:
```
whois -h localhost -p 8043 MAINT-AS64496
```
## Using the Submission Tool
### Input File Formats

TXT Files:
A human-friendly TXT file should include header lines followed by the RPSL object. For example:
```
# MAKE SURE TO CHANGE THE DESIRED ACTION. OPTIONS ARE: add, modify, delete
action: add
password: Juniper
multiple_routes: true
route: 198.18.0.0/15
descr: FAKE TELECOM
origin: AS64496
admin-c: FAKEME5-NICBR
member-of: AS64496:RS-ROUTES
geoidx: BR
geoidx: BRA
geoidx: 021
geoidx: BR-RJ
geoidx: Rio de Janeiro
remarks: ==========================================================
remarks: This is a FAKE TELECOM (AS64496) owned route object
remarks: Abuse/UCE: abuse@faketelecom.null
remarks: Network: engenharia@faketelecom.null
remarks: Peering: peering@faketelecom.null
remarks: Website: http://www.faketelecom.null
remarks: Peering and Routing Policy: http://as64496.peeringdb.com/
remarks: ==========================================================
mnt-by: MAINT-AS64496
notify: noc@faketelecom.null
changed: noc@faketelecom.null 20250219
source: IRRD
rpki-ov-state: valid
```
### JSON Files
JSON files can be utilized, provided they contain an object with the following keys: "`object_type`", "`action`", "`data`", and "`status`".

### Running the Tool
To run the submission tool, provide the full path to the input file with the following command:
```
python irr_rpsl_dispatcher.py --instance irrd /full/path/to/your_txt_file.txt
```
The tool will perform the following steps:

1. Read the specified file.
2. Process header lines (action, password, multiple_routes).
3. Sanitize NIC handle fields.
4. Generate a JSON file in the `objects/` folder.
5. If `multiple_routes: true` is set and the object is a route (or route6), it will generate additional objects as outlined.
6. Submit the object(s) via the IRRd HTTP API.
7. Update the JSON file's "status" to "submitted" if the submission is successful.

## Troubleshooting and Error Handling

### 500 Internal Server Error
If you encounter a "500 Internal Server Error" from the API, check the IRRd logs for further details. Occasionally, email notifications (via SMTP)
may lead to transient failures. You can consider the operation successful if the objects are being created or deleted despite the error.

### Multiple Routes Generation
For IPv4 objects, subdivisions are created up to /24. For IPv6 objects (route6), subdivisions are created up to /36. An error will be raised if 
an IPv6 prefix exceeds /36.

### Maintainer and NIC Handle Issues
If NIC handle fields (admin-c, tech-c) are not accepted, ensure they are properly sanitized. The tool converts names such as "Leonardo Furtado" into
"LEONARDOFURTADO." If an object is created with an incorrect NIC handle, consider adjusting the header file or using the -o override option.

## Additional Information

### Docker Compose
The `docker-compose.yml` file defines services for IRRd, PostgreSQL, and Redis. Ensure these containers are running as per the build instructions.

### Database Schema
The Alembic migrations in IRRd set up the necessary PostgreSQL schema. Be sure to execute the migration commands after building the containers.

### API Submission
The tool utilizes the IRRd HTTP API endpoint (typically on port 8080 for local IRRd) to submit RPSL objects.

### Extensibility
Future enhancements may include support for IPv6 multiple routes beyond /36 (should regulations change) and additional logging or error-handling improvements.